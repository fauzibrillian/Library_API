// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	book "library_api/features/book"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DelBook provides a mock function with given fields: userID, bookID
func (_m *Repository) DelBook(userID uint, bookID uint) error {
	ret := _m.Called(userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for DelBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBook provides a mock function with given fields: bookID
func (_m *Repository) GetBook(bookID uint) (*book.Book, error) {
	ret := _m.Called(bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 *book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*book.Book, error)); ok {
		return rf(bookID)
	}
	if rf, ok := ret.Get(0).(func(uint) *book.Book); ok {
		r0 = rf(bookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBook provides a mock function with given fields: userID, newBook
func (_m *Repository) InsertBook(userID uint, newBook book.Book) (book.Book, error) {
	ret := _m.Called(userID, newBook)

	if len(ret) == 0 {
		panic("no return value specified for InsertBook")
	}

	var r0 book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, book.Book) (book.Book, error)); ok {
		return rf(userID, newBook)
	}
	if rf, ok := ret.Get(0).(func(uint, book.Book) book.Book); ok {
		r0 = rf(userID, newBook)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	if rf, ok := ret.Get(1).(func(uint, book.Book) error); ok {
		r1 = rf(userID, newBook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBook provides a mock function with given fields: tittle, page, limit
func (_m *Repository) SearchBook(tittle string, page uint, limit uint) ([]book.Book, uint, error) {
	ret := _m.Called(tittle, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchBook")
	}

	var r0 []book.Book
	var r1 uint
	var r2 error
	if rf, ok := ret.Get(0).(func(string, uint, uint) ([]book.Book, uint, error)); ok {
		return rf(tittle, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, uint, uint) []book.Book); ok {
		r0 = rf(tittle, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint, uint) uint); ok {
		r1 = rf(tittle, page, limit)
	} else {
		r1 = ret.Get(1).(uint)
	}

	if rf, ok := ret.Get(2).(func(string, uint, uint) error); ok {
		r2 = rf(tittle, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBook provides a mock function with given fields: userID, bookID, input
func (_m *Repository) UpdateBook(userID uint, bookID uint, input book.Book) (book.Book, error) {
	ret := _m.Called(userID, bookID, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, book.Book) (book.Book, error)); ok {
		return rf(userID, bookID, input)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, book.Book) book.Book); ok {
		r0 = rf(userID, bookID, input)
	} else {
		r0 = ret.Get(0).(book.Book)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, book.Book) error); ok {
		r1 = rf(userID, bookID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
