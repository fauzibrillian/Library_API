// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	transaction "library_api/features/transaction"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AllTransaction provides a mock function with given fields: userID, name, page, limit
func (_m *Repository) AllTransaction(userID uint, name string, page uint, limit uint) ([]transaction.Transaction, int, error) {
	ret := _m.Called(userID, name, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllTransaction")
	}

	var r0 []transaction.Transaction
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, string, uint, uint) ([]transaction.Transaction, int, error)); ok {
		return rf(userID, name, page, limit)
	}
	if rf, ok := ret.Get(0).(func(uint, string, uint, uint) []transaction.Transaction); ok {
		r0 = rf(userID, name, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, uint, uint) int); ok {
		r1 = rf(userID, name, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(uint, string, uint, uint) error); ok {
		r2 = rf(userID, name, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Borrow provides a mock function with given fields: userID, BookID
func (_m *Repository) Borrow(userID uint, BookID uint) (transaction.Transaction, error) {
	ret := _m.Called(userID, BookID)

	if len(ret) == 0 {
		panic("no return value specified for Borrow")
	}

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (transaction.Transaction, error)); ok {
		return rf(userID, BookID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) transaction.Transaction); ok {
		r0 = rf(userID, BookID)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, BookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReturn provides a mock function with given fields: userID, transactionID, input
func (_m *Repository) UpdateReturn(userID uint, transactionID uint, input transaction.Transaction) ([]transaction.Transaction, error) {
	ret := _m.Called(userID, transactionID, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReturn")
	}

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, transaction.Transaction) ([]transaction.Transaction, error)); ok {
		return rf(userID, transactionID, input)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, transaction.Transaction) []transaction.Transaction); ok {
		r0 = rf(userID, transactionID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, transaction.Transaction) error); ok {
		r1 = rf(userID, transactionID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
