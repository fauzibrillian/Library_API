// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	transaction "library_api/features/transaction"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AllTransaction provides a mock function with given fields: token, name, page, limit
func (_m *Service) AllTransaction(token *jwt.Token, name string, page uint, limit uint) ([]transaction.Transaction, int, error) {
	ret := _m.Called(token, name, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllTransaction")
	}

	var r0 []transaction.Transaction
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, string, uint, uint) ([]transaction.Transaction, int, error)); ok {
		return rf(token, name, page, limit)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, string, uint, uint) []transaction.Transaction); ok {
		r0 = rf(token, name, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, string, uint, uint) int); ok {
		r1 = rf(token, name, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*jwt.Token, string, uint, uint) error); ok {
		r2 = rf(token, name, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Borrow provides a mock function with given fields: token, BookID
func (_m *Service) Borrow(token *jwt.Token, BookID uint) (transaction.Transaction, error) {
	ret := _m.Called(token, BookID)

	if len(ret) == 0 {
		panic("no return value specified for Borrow")
	}

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) (transaction.Transaction, error)); ok {
		return rf(token, BookID)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint) transaction.Transaction); ok {
		r0 = rf(token, BookID)
	} else {
		r0 = ret.Get(0).(transaction.Transaction)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint) error); ok {
		r1 = rf(token, BookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReturn provides a mock function with given fields: token, transactionID, input
func (_m *Service) UpdateReturn(token *jwt.Token, transactionID uint, input transaction.Transaction) ([]transaction.Transaction, error) {
	ret := _m.Called(token, transactionID, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReturn")
	}

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint, transaction.Transaction) ([]transaction.Transaction, error)); ok {
		return rf(token, transactionID, input)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, uint, transaction.Transaction) []transaction.Transaction); ok {
		r0 = rf(token, transactionID, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, uint, transaction.Transaction) error); ok {
		r1 = rf(token, transactionID, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
