openapi: '3.0.2'
info:
  title: Library API
  version: '1.0'
servers:
  - url: https://api.server.test/v1
tags:
  - name: Book
    description: Everything about your Book
  - name: Rack
    description: Everything about your Rack Book
  - name: User
    description: Operations about User
  - name: Transaction
    description: Operations about Transaction
  - name: Auth
    description: Operations about Auth
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Login into library
      description: ''
      operationId: loginUser
      parameters:
        - name: phone
          in: query
          required: true
          schema:
            type: integer
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
        '400':
          description: Invalid username/password supplied
  /register:
    post:
      tags:
        - Auth
      summary: Register User into library
      description: ''
      operationId: registerUser
      parameters:
        - name: phone
          in: query
          required: true
          schema:
            type: integer
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
  /user/:id:
    patch:
      tags:
        - User
      summary: Update user
      description: ''
      operationId: updateUser
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: integer
        - name: phone
          in: query
          required: false
          schema:
            type: integer
        - name: avatar
          in: query
          required: false
          schema:
            type: string
            format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
        '400':
          description: Bad Request
        '403':
          description: Invalid Access
        
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        phone:
          type: integer
          example: 12345
        name:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
        role:
          type: string
          description: Role Status
          example: 'admin'
    Login:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        phone:
          type: integer
          example: 12345
        name:
          type: string
          example: theUser
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDUwNDAzNjU3MzIsImlhdCI6MTcwNTAzODU2NTczMiwiaWQiOjEsInJvbGUiOiJhZG1pbiJ9.kHm8kFxSzAFQu7tj-YnCUFsTMjxa7Gdw7bueFyVDVgI
        role:
          type: string
          description: Role Status
          example: 'admin'
      xml:
        name: user
    UpdateUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        phone:
          type: integer
          example: 12345
        name:
          type: string
          example: theUser
        avatar:
          type: string
          example: avatar.jpg
      xml:
        name: user
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
